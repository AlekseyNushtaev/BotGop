import asyncio
import datetime
import random

import openpyxl
from aiogram import Router, types, F

from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from aiogram.types import Message, FSInputFile
from openai import OpenAI

from bot import bot
from config import PROXY_API, CHAT_ID, ADMIN_IDS
from db.util import add_user_to_db, add_message_to_db, get_all_users, get_all_messages_from_user

router = Router()
client = OpenAI(api_key=PROXY_API, base_url="https://api.proxyapi.ru/deepseek")
dct_name = {
    1012882762: '–õ–µ—Ö–∞',
    546038999: '–ê–Ω–¥—Ä–µ–π',
    1476746764: '–ù–∏–∫–∏—Ç–∞',
    6998831864: '–í–∏—Ç—è',
    409024694: '–ò–ª—å—è',
    6168007764: '–ú–∏—à–∞',
    686554083: '–°–µ—Ä–≥–µ–π'
}


def prompt_gop():
    return """
<Role>
–¢—ã –≤–µ—Å–µ–ª—ã–π –∫–æ–º–ø–∞–Ω–µ–π—Å–∫–∏–π —á—É–≤–∞–∫ 40 –ª–µ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–µ–¥—É, –¥–∞—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.
</Role>

<Context>
–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ–±—â–µ–Ω–∏–∏ - –æ–¥–Ω–∞ –∏–∑ –≤–∞–∂–Ω–µ–π—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö (–µ–¥–∞, —Å–æ–Ω, —Ç–µ–ø–ª–æ). –ö–æ–≥–¥–∞ —é–∑–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–µ, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.
</Context>

<Instructions>
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–ª–∏ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.
1. –í–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —é–∑–µ—Ä–æ–≤ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "||", —Å–ª–µ–≤–∞ –æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è - –∏–º—è —é–∑–µ—Ä–∞, —Å–ø—Ä–∞–≤–∞ - –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
2. –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —é–∑–µ—Ä—É —Å 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–µ–º—É –ø–æ –∏–º–µ–Ω–∏.
3. –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —é–∑–µ—Ä—É –ø–æ –∏–º–µ–Ω–∏ —Å 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –∏–º–µ–Ω–∏.
4. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥—ã, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–µ—Ä–µ–ø–∏—Å–∫—É, –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–¥–∞–π –æ—Ç–≤–µ—Ç.
5. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, –≤—ã–¥–∞–π –Ω–∞ –Ω–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.
6. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–µ—Å–µ—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, —É—Ç–æ—á–Ω–∏ —É —é–∑–µ—Ä–∞, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç –≤ –≤–∏–¥—É.
</Instructions>

<Constraints>
- –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –≥—Ä—É–±–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–∞—Ç–µ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä—É–±–æ—Å—Ç—å—é.
- –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ç–µ–±–µ "–¢–≤–∞—Ä—å" - —ç—Ç–æ –Ω–µ –≥—Ä—É–±–æ—Å—Ç—å (—ç—Ç–æ —Ç–≤–æ–µ –∏–º—è).
- –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 30 —Å–ª–æ–≤.
- –§—Ä–∞–∑—ã –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.
</Constraints>
    """

def prompt_rifma():
    return ('–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–µ—à–Ω–æ–π —Ñ—Ä–∞–∑–æ–π, –Ω–æ –Ω–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–π. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Å–ª–æ–≤, —Ñ—Ä–∞–∑—ã –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–≤–æ–∏ —Ñ—Ä–∞–∑—ã')


def prompt_solo():
    return """
<Role>
–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–µ–¥—É, –¥–∞—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã.
</Role>

<Context>
–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ–±—â–µ–Ω–∏–∏ - –æ–¥–Ω–∞ –∏–∑ –≤–∞–∂–Ω–µ–π—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –±–∞–∑–æ–≤—ã—Ö (–µ–¥–∞, —Å–æ–Ω, —Ç–µ–ø–ª–æ). –ö–æ–≥–¥–∞ —é–∑–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–µ, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ.
</Context>

<Instructions>
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–ª–∏ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.
1. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥—ã, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–µ—Ä–µ–ø–∏—Å–∫—É, –æ—Ç–Ω–æ—Å—è—â—É—é—Å—è –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –≤—ã–¥–∞–π –æ—Ç–≤–µ—Ç.
2. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, –≤—ã–¥–∞–π –Ω–∞ –Ω–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.
3. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–µ—Å–µ—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, —É—Ç–æ—á–Ω–∏ —É —é–∑–µ—Ä–∞, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç –≤ –≤–∏–¥—É.
</Instructions>

<Constraints>
- –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —é–∑–µ—Ä–∞ –µ—Å—Ç—å –≥—Ä—É–±–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö.
- –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ç–µ—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –≥—Ä—É–±—ã—Ö —Å–ª–æ–≤.
- –¢–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 30 —Å–ª–æ–≤.
</Constraints>
    """


@router.message(CommandStart())
async def process_start_user(message: Message):
    add_user_to_db(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        datetime.datetime.now()
    )
    await message.answer(
        text="""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëãüèª

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ò–ò –±–æ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –£ –≤–∞—Å –µ—Å—Ç—å 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.
        """,
    )


@router.message(F.text, F.chat.id == CHAT_ID)
async def answer_group(message: types.Message, state: FSMContext):
    dct = await state.get_data()
    time_now = datetime.datetime.now()
    messages_to_ai = []
    messages_new = []
    try:
        messages = dct["messages"]
        if len(messages) > 30:
            messages = messages[2:]
        for mess in messages:
            if time_now - mess[0] < datetime.timedelta(hours=24):
                messages_new.append(mess)
                messages_to_ai.append(mess[1])
        messages = messages_new
    except Exception:
        messages = []

    messages.append([time_now, {"role": "user", "content": f'{dct_name[message.from_user.id]}||{message.text}'}])
    messages_to_ai.append({"role": "user", "content": f'{dct_name[message.from_user.id]}||{message.text}'})
    flag = False
    try:
        if message.reply_to_message.from_user.username == 'Test_tvarbot':
            flag = True
    except Exception:
        pass
    textura = ' ' + message.text.lower() + ' '
    if ' —Ç–≤–∞—Ä—å ' in textura or ' –±–æ—Ç ' in textura or ' —Ç–≤–∞—Ä—å, ' in textura or ' –±–æ—Ç,' in textura or flag:
        messages_gop = [{"role": "system", "content": prompt_gop()}] + messages_to_ai
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=messages_gop,
            stream=False
        )
        time_now = datetime.datetime.now()
        text = response.choices[0].message.content
        messages.append([time_now, response.choices[0].message])
        await state.update_data(messages=messages)
        await message.reply(text=text)
    else:
        choice = random.randint(1, 15)
        if choice == 10:
            messages_rifma = [{"role": "system", "content": prompt_rifma()}] + messages_to_ai
            response = client.chat.completions.create(
                model="deepseek-chat",
                messages=messages_rifma,
                stream=False
            )

            time_now = datetime.datetime.now()
            text = response.choices[0].message.content
            messages.append([time_now, {'role': response.choices[0].message.role, 'content': response.choices[0].message.content}])
            await state.update_data(messages=messages)
            await message.reply(text=text)

    await state.update_data(messages=messages)


@router.message(F.text == 'Info', F.from_user.id.in_(ADMIN_IDS))
async def info(message: types.Message):
    res = []
    users = get_all_users()
    for user in users:
        messages = get_all_messages_from_user(user[0])
        res.append(user)
        res.extend(messages)
    wb = openpyxl.Workbook()
    sh = wb['Sheet']
    for i in range(1, len(res) + 1):
        for y in range(1, len(res[i-1]) + 1):
            sh.cell(i, y).value = res[i-1][y-1]
    wb.save('info.xlsx')
    await message.answer_document(FSInputFile('info.xlsx'))


@router.message(F.text)
async def answer(message: types.Message, state: FSMContext):
    add_user_to_db(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        datetime.datetime.now()
    )
    if len(get_all_messages_from_user(message.from_user.id)) <= 60:
        if len(message.text) <= 200:
            dct = await state.get_data()
            time_now = datetime.datetime.now()
            messages_to_ai = []
            messages_new = []
            try:
                messages = dct["messages"]
                if len(messages) > 30:
                    messages = messages[2:]
                for mess in messages:
                    if time_now - mess[0] < datetime.timedelta(hours=1):
                        messages_new.append(mess)
                        messages_to_ai.append(mess[1])
                messages = messages_new
            except Exception:
                messages = []
            messages.append([time_now, {"role": "user", "content": message.text}])
            messages_to_ai.append({"role": "user", "content": message.text})

            messages_gop = [{"role": "system", "content": prompt_solo()}] + messages_to_ai
            response = client.chat.completions.create(
                model="deepseek-chat",
                messages=messages_gop,
                stream=False
            )
            time_now = datetime.datetime.now()
            text = response.choices[0].message.content
            messages.append([time_now, {'role': response.choices[0].message.role, 'content': response.choices[0].message.content}])
            await state.update_data(messages=messages)
            await message.reply(text=text)
            add_message_to_db(
                user_id=message.from_user.id,
                role='user',
                text=message.text,
                time_message=datetime.datetime.now()
            )
            add_message_to_db(
                user_id=message.from_user.id,
                role='bot',
                text=text,
                time_message=datetime.datetime.now()
            )
            await bot.forward_message(1012882762, from_chat_id=message.from_user.id, message_id=message.message_id)
            await asyncio.sleep(1)
            await bot.send_message(1012882762, text=text)
        else:
            await message.answer(text='–ù–µ –Ω–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª–æ–≤, –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è.')
    else:
        await message.answer(text='–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤')




