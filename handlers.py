import random

import requests


from aiogram import Router, types, F

from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from aiogram.types import Message

from config import ADMIN_IDS, PROXY_API, CHAT_ID



router = Router()
def prompt(text):
    return (f'–¢—ã –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –≥—Ä—É–±–æ—Å—Ç–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å.'
            f'–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤—ã—à–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ —Ç–µ–±–µ –Ω–µ –¥–∞–¥—É—Ç —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ - {text}\n'
            f'–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–ª–æ–≤, –º–∞—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 5% —Å–ª–æ–≤')


def prompt_gop(text):
    return (f'–¢—ã –≥–æ–ø–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –≥—Ä—É–±–æ—Å—Ç–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –º–∞—Ç–æ–º (–≤—ã–±–∏—Ä–∞–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –æ—Ç —Ö—É–π, –ø–∏–∑–¥–∞, –µ–±–∞—Ç—å, –±–ª—è–¥—å,'
            f' –≤—Å—é —Å–≤–æ—é —Ä–µ—á—å –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏–ø—Ä–∞–≤–ª—è–µ—à—å —Å–º–µ—à–Ω—ã–º –º–∞—Ç–µ—Ä–∫–æ–º –Ω–æ –Ω–µ –±–æ–ª–µ–µ 10% —Ç–µ–∫—Å—Ç–∞'
            f'–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤—ã—à–µ - {text}\n'
            f'–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–ª–æ–≤, –º–∞—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 5% —Å–ª–æ–≤')


def prompt_rifma(text):
    return (f'–í–æ–∑—å–º–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - {text} -  '
            f'–∏ —Å–¥–µ–ª–∞–π —Ä–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é —Å –º–∞—Ç–æ–º (—Ö—É–π, –ø–∏–∑–¥–∞, –µ–±–∞—Ç—å, –±–ª—è–¥—å)\n'
            f'–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–≥–æ 1 —Ä–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ–µ —Å–ª–æ–≤–æ')


@router.message(CommandStart())
async def process_start_user(message: Message):
    await message.answer(
        text="""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëãüèª

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ò–ò –±–æ—Ç. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.
        """,
    )


@router.message(F.text, F.chat.id == CHAT_ID, F.reply_to_message)
async def reply_group(message: types.Message, state: FSMContext):
    dct = await state.get_data()
    try:
        messages = dct["messages"]
        if len(messages) > 11:
            messages = messages[2:]
    except Exception:
        messages = []
    text_old = ''
    for msg in messages:
        if msg["role"] != "assistant":
            text_old += f'{msg["role"]} —Å–ø—Ä–æ—Å–∏–ª: '
        else:
            text_old += '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª: '
        text_old += msg['content'] + '\n'
    messages.append({"role": message.from_user.first_name, "content": f"{message.text}"})
    if message.reply_to_message.from_user.username == 'Test_tvarbot':
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {PROXY_API}"
        }
        data = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": text_old + prompt_gop(message.text)}],
        }
        response = requests.post('https://api.proxyapi.ru/deepseek/chat/completions',
                                 headers=headers,
                                 json=data
                                 )
        text = response.json()["choices"][0]["message"]["content"]
        messages.append({"role": "assistant", "content": f"{text}"})
        await message.reply(text=text)
    await state.update_data(messages=messages)


@router.message(F.text, F.chat.id == CHAT_ID)
async def answer_group(message: types.Message, state: FSMContext):
    dct = await state.get_data()
    try:
        messages = dct["messages"]
        if len(messages) > 11:
            messages = messages[2:]
    except Exception:
        messages = []
    text_old = ''
    for msg in messages:
        if msg["role"] != "assistant":
            text_old += f'{msg["role"]} —Å–ø—Ä–æ—Å–∏–ª: '
        else:
            text_old += '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª: '
        text_old += msg['content'] + '\n'
    messages.append({"role": message.from_user.first_name, "content": f"{message.text}"})
    if '—Ç–≤–∞—Ä' in message.text.lower() or '–±–æ—Ç' in message.text.lower():
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {PROXY_API}"
        }
        data = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": text_old + prompt_gop(message.text)}],
        }
        response = requests.post('https://api.proxyapi.ru/deepseek/chat/completions',
                                 headers=headers,
                                 json=data
                                 )
        text = response.json()["choices"][0]["message"]["content"]
        messages.append({"role": "assistant", "content": f"{text}"})
        await message.reply(text=text)
    else:
        choice = random.randint(1, 15)
        if choice == 10:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {PROXY_API}"
            }
            data = {
                "model": "deepseek-chat",
                "messages": [{"role": "user", "content": prompt_rifma(message.text)}],
            }
            response = requests.post('https://api.proxyapi.ru/deepseek/chat/completions',
                                     headers=headers,
                                     json=data
                                     )
            print(text_old + prompt_rifma(message.text))
            text = response.json()["choices"][0]["message"]["content"]
            messages.append({"role": "assistant", "content": f"{text}"})
            await message.reply(text=text)

    await state.update_data(messages=messages)


# @router.message(F.text)
# async def answer(message: types.Message, state: FSMContext):
#     dct = await state.get_data()
#     try:
#         messages = dct["messages"]
#         if len(messages) > 11:
#             messages = messages[2:]
#     except Exception:
#         messages = []
#     text_old = ''
#     for msg in messages:
#         if msg["role"] == "user":
#             text_old += '–Ø —Å–ø—Ä–æ—Å–∏–ª: '
#         else:
#             text_old += '–¢—ã –æ—Ç–≤–µ—Ç–∏–ª: '
#         text_old += msg['content'] + '\n'
#
#     headers = {
#         "Content-Type": "application/json",
#         "Authorization": "Bearer sk-f5rhhdRRkixipx7wojLV73q76zA4HQD4"
#     }
#     data = {
#             "model": "deepseek-chat",
#             "messages": [{"role": "user", "content": text_old + prompt(message.text)}],
#         }
#     response = requests.post('https://api.proxyapi.ru/deepseek/chat/completions',
#                             headers=headers,
#                             json=data
#                             )
#     text = response.json()["choices"][0]["message"]["content"]
#     messages.append({"role": "user", "content": f"{message.text}"})
#     messages.append({"role": "assistant", "content": f"{text}"})
#     await state.update_data(messages=messages)
#     await message.answer(text=text)



